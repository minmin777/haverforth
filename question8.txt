What new perspective did you gain by redoing the lab in JavaScript?
	It was weird to think of JavaScript not as C++ as they look very familiar so it was challenging not to think of this like C++. 
	It is also strange that JS is both kind of object oriented and kind of functional.
	Another perspective is that JS is dynamically typed with no types.
	

Can you point to one instance where the lack of types in JavaScript was damaging to your productivity?
	When I was first looking at the code of $(document).ready as there was no types for the object terminal or the functions process and runRepl, so I was confused how I should use them.
	

Did JavaScript's lack of types surprise you? Or hurt you in any way? Or was it easier than C++ because you didn't have to annotate the program with types? Either answer is fine here, as long as you provide some thoughtful reflection.
	I was surprised that JavaScript lacks types and I forgot sometimes that it lacked types as I would write the types of the variables because the syntax of C++ and JavaScript are so similar.
	I am able to understand code better if types are specified so while I was writing my code I kept on writing the types of the objects and variables as I was used to C++ and it helped me understand the code better. 
	
	
Describe a few features of programming your previous lab that you used here. For example, describe how you observed any of the following in JS:
	I used an instance of a map with var words = {}. I understood this data structure to be a dictionary so words "map" is done in the same way as in C++.
	As in Racket, JS is dynamically typed as there are no types that need to be specified thus the variables are typed in runtime.
	Objects - everything is an object in JS, however since in C++ an object is an instance it was weird to separate the two ideas
	Maps (ala std::map in C++) - words = {}, user = {}